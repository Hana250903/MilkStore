// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Repositories.Models;

public partial class MilkStoreContext : DbContext
{
    public MilkStoreContext(DbContextOptions<MilkStoreContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Admin> Admins { get; set; }

    public virtual DbSet<Brand> Brands { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<Milk> Milk { get; set; }

    public virtual DbSet<MilkPicture> MilkPictures { get; set; }

    public virtual DbSet<MilkType> MilkTypes { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Admin>(entity =>
        {
            entity.ToTable("Admin");

            entity.Property(e => e.Desciption)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.User).WithMany(p => p.Admins)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Admin_User");
        });

        modelBuilder.Entity<Brand>(entity =>
        {
            entity.ToTable("Brand");

            entity.Property(e => e.BrandName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.ToTable("Comment");

            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.DateCreate).HasColumnType("datetime");
            entity.Property(e => e.Picture)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Member).WithMany(p => p.Comments)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comment_Member");

            entity.HasOne(d => d.Milk).WithMany(p => p.Comments)
                .HasForeignKey(d => d.MilkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comment_Milk");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.ToTable("Member");

            entity.Property(e => e.Desciption)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.User).WithMany(p => p.Members)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Member_User");
        });

        modelBuilder.Entity<Milk>(entity =>
        {
            entity.Property(e => e.AppropriateAge)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MilkName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StorageInstructions)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Brand).WithMany(p => p.Milk)
                .HasForeignKey(d => d.BrandId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Milk_Brand");

            entity.HasOne(d => d.MilkType).WithMany(p => p.Milk)
                .HasForeignKey(d => d.MilkTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Milk_MilkType");
        });

        modelBuilder.Entity<MilkPicture>(entity =>
        {
            entity.ToTable("MilkPicture");

            entity.Property(e => e.Picture)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Milk).WithMany(p => p.MilkPictures)
                .HasForeignKey(d => d.MilkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MilkPicture_Milk");
        });

        modelBuilder.Entity<MilkType>(entity =>
        {
            entity.ToTable("MilkType");

            entity.Property(e => e.TypeName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK_OrderDetail");

            entity.ToTable("Order");

            entity.Property(e => e.DateCreate).HasColumnType("datetime");
            entity.Property(e => e.OrderStatus)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Member).WithMany(p => p.Orders)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetail_Member");

            entity.HasOne(d => d.Voucher).WithMany(p => p.Orders)
                .HasForeignKey(d => d.VoucherId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetail_Voucher");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasKey(e => e.OrderDetailId).HasName("PK_Cart");

            entity.ToTable("OrderDetail");

            entity.HasOne(d => d.Milk).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.MilkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetail_Milk");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetail_Order");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("Role");

            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.Property(e => e.Desciption)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.User).WithMany(p => p.Staff)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Staff_User");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.DateCreate).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.ProfilePicture)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_User_Role");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.ToTable("Voucher");

            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}